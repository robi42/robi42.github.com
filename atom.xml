<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Robi's Blog]]></title>
  <link href="http://robi42.github.com/atom.xml" rel="self"/>
  <link href="http://robi42.github.com/"/>
  <updated>2012-12-16T17:18:02+01:00</updated>
  <id>http://robi42.github.com/</id>
  <author>
    <name><![CDATA[Robert Thurnher]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Humble Programmer]]></title>
    <link href="http://robi42.github.com/blog/2012/12/07/the-humble-programmer/"/>
    <updated>2012-12-07T00:42:00+01:00</updated>
    <id>http://robi42.github.com/blog/2012/12/07/the-humble-programmer</id>
    <content type="html"><![CDATA[<blockquote><p>The competent programmer is fully aware of the strictly limited size of his own skull; therefore he approaches the programming task in full humility, and among other things he avoids clever tricks like the plague.</p><footer><strong>Edsger W. Dijkstra</strong> <cite><a href='http://www.cs.utexas.edu/users/EWD/transcriptions/EWD03xx/EWD340.html'>ACM Turing Lecture 1972</a></cite></footer></blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A Visual Music Exploration Plugin App for Spotify's Desktop Client]]></title>
    <link href="http://robi42.github.com/blog/2012/11/21/a-visual-music-exploration-plugin-app-for-spotifys-desktop-client/"/>
    <updated>2012-11-21T20:21:00+01:00</updated>
    <id>http://robi42.github.com/blog/2012/11/21/a-visual-music-exploration-plugin-app-for-spotifys-desktop-client</id>
    <content type="html"><![CDATA[<p>This R&amp;D project which I&#8217;ve finished recently is in its essence implementing an innovative way of visualizing Spotify music collection data. It&#8217;s mainly geared towards discovery of similar music related to the currently played tracks of a user. Technically, the project partially builds upon the foundation layed out with a previous labs project &#8211; here&#8217;s a <a href="http://sftb.herokuapp.com/docs/report.pdf">report</a> (PDF). Organisationally, it was done as a cooperation with <a href="http://www.spectralmind.com/">Spectralmind</a> and the <a href="http://ifs.tuwien.ac.at/mir/">MIR group</a> of Vienna University of Technology.</p>

<h2>Implementation</h2>

<p>Basically, the app connects to <strong>Last.fm</strong> data for similarity computation with their (more or less) RESTful web service API via JSONP. In addition to that, <strong>Spotify</strong>&#8217;s desktop client <a href="https://developer.spotify.com/technologies/apps/">plugin apps</a> JS API is used pretty heavily. The graphics are rendered as interactive SVG through <strong>RaphaÃ«l.js</strong>. Plus, <strong>Backbone.js</strong> is applied as a mean to improve structure and, consequently, maintainability of the app. For layouting the animated visualization itself a force-directed <a href="http://en.wikipedia.org/wiki/Force-based_algorithms_%28graph_drawing%29">spring graph</a> algorithm implementation is employed which was orginally written within Google&#8217;s Caja project and now adapted + tuned for the specific use case here.</p>

<h2>Functionality</h2>

<p>In the beginning, the user sees the current track symbolized by a central blue bubble and a loading spinner indicating app activity. Here&#8217;s a screenshot:</p>

<p><img src="http://robi42.github.com/images/spotify-bubbles/screenshot1.png" title="Screenshot 1" alt="Screenshot 1"></p>

<p>After that, found similar tracks are arranged as red bubbles in a concentric circle around the central one. Again, a screenshot:</p>

<p><img src="http://robi42.github.com/images/spotify-bubbles/screenshot2.png" title="Screenshot 2" alt="Screenshot 2"></p>

<p>Here&#8217;s how the actual animated spring graph layouting visualization initially looks like:</p>

<p><img src="http://robi42.github.com/images/spotify-bubbles/screenshot3.png" title="Screenshot 3" alt="Screenshot 3"></p>

<p>And this is how it can look like when the animation finished rendering:</p>

<p><img src="http://robi42.github.com/images/spotify-bubbles/screenshot4.png" title="Screenshot 4" alt="Screenshot 4"></p>

<p>The history of played tracks is visualized as a diagonal, interactive sort of a time axis which can also be seen here:</p>

<p><img src="http://robi42.github.com/images/spotify-bubbles/screenshot5.png" title="Screenshot 5" alt="Screenshot 5"></p>

<p>Intuitively, clicking on a bubble plays the respective track in the Spotify audio player and triggers a visualization iteration, BTW.</p>

<h2>Conclusion</h2>

<p>The approach proved to be viable and it can be worthwhile indeed searching and discovering new music fitting to one&#8217;s individual taste in an entertaining way with this Spotify plugin app. Nevertheless, there are still numerous details where improvements and enhancements are possible. E.g., the graphics and visualization could be made more pleasant. Apart from that, also further tweaking connected to similarity computation could be done. Yet, as a research prototype demonstrating a proof of concept this is sufficient, it was fun building it, and possibly it&#8217;ll show up within a polished product in one way or another. :)</p>

<p><strong>PS &amp; FYI:</strong> Spectralmind is currently looking for Android developers &#8211; I&#8217;d recommend <a href="http://www.spectralmind.com/company/jobs/">applying</a> since they&#8217;re great folks to work with on interesting projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pragmatic App Stats With R]]></title>
    <link href="http://robi42.github.com/blog/2012/10/21/pragmatic-app-stats-with-r/"/>
    <updated>2012-10-21T15:00:00+02:00</updated>
    <id>http://robi42.github.com/blog/2012/10/21/pragmatic-app-stats-with-r</id>
    <content type="html"><![CDATA[<p>Here&#8217;re some tips for conveniently generating automated visual app stats from MySQL data.</p>

<p>Recommended toolchain:</p>

<ul>
<li><a href="http://www.r-project.org/">R</a> + <a href="http://www.rstudio.org/">RStudio</a></li>
<li><a href="http://cran.r-project.org/web/packages/RMySQL/">RMySQL</a> + <a href="http://ggplot2.org/">ggplot2</a></li>
<li>*nix, cron + mailx &amp; co.</li>
</ul>


<p>Corresponding code bits to get one started:</p>

<figure class='code'><figcaption><span>Simplified R script  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
</pre></td><td class='code'><pre><code class='r'><span class='line'><span class="c1">#!/usr/bin/Rscript</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#install.packages(&#39;RMySQL&#39;)</span>
</span><span class='line'><span class="c1">#install.packages(&#39;ggplot2&#39;)</span>
</span><span class='line'>
</span><span class='line'>library<span class="p">(</span>RMySQL<span class="p">)</span>
</span><span class='line'>library<span class="p">(</span>ggplot2<span class="p">)</span>
</span><span class='line'>library<span class="p">(</span>grid<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># PNG layout of plots helper.</span>
</span><span class='line'>vplayout <span class="o">&lt;-</span> <span class="kr">function</span><span class="p">(</span>x<span class="p">,</span> y<span class="p">)</span> viewport<span class="p">(</span>layout.pos.row<span class="o">=</span>x<span class="p">,</span> layout.pos.col<span class="o">=</span>y<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># Connect to DB.</span>
</span><span class='line'>dbUsername <span class="o">&lt;-</span> <span class="s">&#39;some_user&#39;</span>
</span><span class='line'>dbPassword <span class="o">&lt;-</span> <span class="s">&#39;some_password&#39;</span>
</span><span class='line'>dbName     <span class="o">&lt;-</span> <span class="s">&#39;app_stats_snapshot&#39;</span>
</span><span class='line'>dbHost     <span class="o">&lt;-</span> <span class="s">&#39;localhost&#39;</span>
</span><span class='line'>
</span><span class='line'>dbConnection <span class="o">&lt;-</span> dbConnect<span class="p">(</span>MySQL<span class="p">(),</span> user<span class="o">=</span>dbUsername<span class="p">,</span> password<span class="o">=</span>dbPassword<span class="p">,</span>
</span><span class='line'>                          dbname<span class="o">=</span>dbName<span class="p">,</span> host<span class="o">=</span>dbHost<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># Exemplary queries.</span>
</span><span class='line'>recordsPerDayQuery <span class="o">&lt;-</span>
</span><span class='line'>  <span class="s">&#39;select date(created_at) as Day, count(*) as Count from records where created_at &gt;= &quot;2012-1-1&quot; and date(created_at) &lt; date(now()) group by Day&#39;</span>
</span><span class='line'>
</span><span class='line'>otherRecordsPerDayQuery <span class="o">&lt;-</span>
</span><span class='line'>  <span class="s">&#39;select date(created_at) as Day, count(*) as Count from other_records where created_at &gt;= &quot;2012-1-1&quot; and date(created_at) &lt; date(now()) group by Day&#39;</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># Query data and plot charts.</span>
</span><span class='line'>d1 <span class="o">&lt;-</span> dbGetQuery<span class="p">(</span>dbConnection<span class="p">,</span> recordsPerDayQuery<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>xlabText <span class="o">&lt;-</span> <span class="s">&#39;2012&#39;</span><span class="p">;</span> ylabText <span class="o">&lt;-</span> <span class="s">&#39;Count&#39;</span>
</span><span class='line'>Records <span class="o">&lt;-</span> d1<span class="p">$</span>Count
</span><span class='line'>heading1 <span class="o">&lt;-</span> <span class="s">&#39;Records per Day&#39;</span>
</span><span class='line'>
</span><span class='line'>plot1 <span class="o">&lt;-</span> qplot<span class="p">(</span>as.Date<span class="p">(</span>d1<span class="p">$</span>Day<span class="p">),</span> d1<span class="p">$</span>Count<span class="p">,</span> geom<span class="o">=</span><span class="s">&#39;line&#39;</span><span class="p">,</span> color<span class="o">=</span>Records<span class="p">,</span>
</span><span class='line'>               main<span class="o">=</span>heading1<span class="p">,</span> xlab<span class="o">=</span>xlabText<span class="p">,</span> ylab<span class="o">=</span>ylabText<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>d2 <span class="o">&lt;-</span> dbGetQuery<span class="p">(</span>dbConnection<span class="p">,</span> otherRecordsPerDayQuery<span class="p">)</span>
</span><span class='line'>
</span><span class='line'>Other <span class="o">&lt;-</span> d2<span class="p">$</span>Count
</span><span class='line'>heading2 <span class="o">&lt;-</span> <span class="s">&#39;Other Records per Day&#39;</span>
</span><span class='line'>
</span><span class='line'>plot2 <span class="o">&lt;-</span> qplot<span class="p">(</span>as.Date<span class="p">(</span>d2<span class="p">$</span>Day<span class="p">),</span> d2<span class="p">$</span>Count<span class="p">,</span> geom<span class="o">=</span><span class="s">&#39;line&#39;</span><span class="p">,</span> color<span class="o">=</span>Other<span class="p">,</span>
</span><span class='line'>               main<span class="o">=</span>heading2<span class="p">,</span> xlab<span class="o">=</span><span class="s">&#39;2012&#39;</span><span class="p">,</span> ylab<span class="o">=</span><span class="s">&#39;Count&#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># Write data tables to mail text file.</span>
</span><span class='line'>mailTextFilename <span class="o">&lt;-</span> <span class="s">&#39;/path/to/stats-mail.txt&#39;</span>
</span><span class='line'>
</span><span class='line'>cat<span class="p">(</span>paste<span class="p">(</span><span class="s">&#39;Hi,\n\n#&#39;</span><span class="p">,</span> heading1<span class="p">,</span> <span class="s">&#39;\n&#39;</span><span class="p">),</span> file<span class="o">=</span>mailTextFilename<span class="p">)</span>
</span><span class='line'>write.table<span class="p">(</span>d1<span class="p">,</span> file<span class="o">=</span>mailTextFilename<span class="p">,</span> append<span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span>
</span><span class='line'>            row.names<span class="o">=</span><span class="kc">FALSE</span><span class="p">,</span> quote<span class="o">=</span><span class="kc">FALSE</span><span class="p">,</span> sep<span class="o">=</span><span class="s">&#39; | &#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>cat<span class="p">(</span>paste<span class="p">(</span><span class="s">&#39;\n#&#39;</span><span class="p">,</span> heading2<span class="p">,</span> <span class="s">&#39;\n&#39;</span><span class="p">),</span> file<span class="o">=</span>mailTextFilename<span class="p">,</span> append<span class="o">=</span><span class="kc">TRUE</span><span class="p">)</span>
</span><span class='line'>write.table<span class="p">(</span>d2<span class="p">,</span> file<span class="o">=</span>mailTextFilename<span class="p">,</span> append<span class="o">=</span><span class="kc">TRUE</span><span class="p">,</span>
</span><span class='line'>            row.names<span class="o">=</span><span class="kc">FALSE</span><span class="p">,</span> quote<span class="o">=</span><span class="kc">FALSE</span><span class="p">,</span> sep<span class="o">=</span><span class="s">&#39; | &#39;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1"># Make PNG with plotted charts.</span>
</span><span class='line'>png<span class="p">(</span><span class="s">&#39;/path/to/stats.png&#39;</span><span class="p">,</span> width<span class="o">=</span><span class="m">1024</span><span class="p">,</span> height<span class="o">=</span><span class="m">768</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>grid.newpage<span class="p">()</span>
</span><span class='line'>pushViewport<span class="p">(</span>viewport<span class="p">(</span>layout<span class="o">=</span>grid.layout<span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">1</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>print<span class="p">(</span>plot1<span class="p">,</span> vp<span class="o">=</span>vplayout<span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">))</span>
</span><span class='line'>print<span class="p">(</span>plot2<span class="p">,</span> vp<span class="o">=</span>vplayout<span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">1</span><span class="p">))</span>
</span><span class='line'><span class="c1"># ...</span>
</span><span class='line'>
</span><span class='line'>dev.off<span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Related crontab sending stats mail once per week  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># m h  dom mon dow   command</span>
</span><span class='line'>30 4 * * 1 /path/to/stats.r
</span><span class='line'>0  5 * * 1 mailx -s <span class="s1">&#39;[Example] Stats&#39;</span> -a /path/to/stats.png stats@example.com &lt; /path/to/stats-mail.txt
</span></code></pre></td></tr></table></div></figure>


<p>HTH.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin FTW?]]></title>
    <link href="http://robi42.github.com/blog/2012/09/24/xamarin-ftw/"/>
    <updated>2012-09-24T20:02:00+02:00</updated>
    <id>http://robi42.github.com/blog/2012/09/24/xamarin-ftw</id>
    <content type="html"><![CDATA[<p>Often, when developing a mobile app one wants to target iOS as well as Android (+ maybe MS&#8217; OS).</p>

<p>Now, this basically means developing the app from scratch and consequently maintaining it at least twice on different platforms, written in different languages (Objective-C and Java, that is), using different sets of tools etc.</p>

<p>Cumbersome and potentially error-prone. Well, there&#8217;s a viable alternative:</p>

<p>With <a href="http://xamarin.com/">Xamarin</a> one can write mobile apps targetting iOS and Android in C# using .NET (and native) libraries, sharing code (business logic, data &amp; web service layers, utilities, &#8230;) while creating fully native UIs built on each platform&#8217;s own SDKs, providing access to all respective device capabilities.</p>

<p>In addition to that, there&#8217;s for example <a href="http://blog.xamarin.com/2012/02/10/easily-create-ios-user-interfaces-with-monotouch-dialog/">MonoTouch.Dialog</a> making it easier and more fun to create table-based iOS UIs and for Android there&#8217;s a useful visual <a href="http://docs.xamarin.com/android/tutorials/Designer_Walkthrough">UI design tool</a> within the MonoDevelop IDE. Plus, there&#8217;s <a href="http://xamarin.com/mobileapi">Xamarin.Mobile</a> aimed at exposing an unified API facade for accessing common device features. All interesting stuff when used sensibly.</p>

<p>Here&#8217;s some demo code (which is loosely based on samples from the recommendable book <a href="http://shop.oreilly.com/product/0636920024002.do">&#8220;Mobile Development with C#&#8221;</a>) showing how mentioned shared layers could benefit:</p>

<figure class='code'><figcaption><span>Simple model  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Tweet</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">long</span>     <span class="n">Id</span>        <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="n">DateTime</span> <span class="n">CreatedAt</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span>   <span class="n">Text</span>      <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Simple REST API client  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TwitterApiClient</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">const</span> <span class="kt">string</span> <span class="n">BaseUrl</span> <span class="p">=</span> <span class="s">&quot;https://api.twitter.com/1/statuses/&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">DoWithTweetsForUser</span><span class="p">(</span><span class="kt">string</span> <span class="n">username</span><span class="p">,</span> <span class="n">Action</span><span class="p">&lt;</span><span class="n">IList</span><span class="p">&lt;</span><span class="n">Tweet</span><span class="p">&gt;&gt;</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">webClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WebClient</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">url</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}user_timeline.json?screen_name={1}&quot;</span><span class="p">,</span>
</span><span class='line'>                                <span class="n">BaseUrl</span><span class="p">,</span> <span class="n">Uri</span><span class="p">.</span><span class="n">EscapeUriString</span><span class="p">(</span><span class="n">username</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">webClient</span><span class="p">.</span><span class="n">DownloadStringCompleted</span> <span class="p">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">tweets</span> <span class="p">=</span> <span class="p">(</span><span class="k">from</span> <span class="n">element</span> <span class="k">in</span> <span class="n">JsonValue</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">Result</span><span class="p">)</span> <span class="k">as</span> <span class="n">JsonArray</span>
</span><span class='line'>                <span class="n">let</span> <span class="n">tweetData</span> <span class="p">=</span> <span class="n">element</span> <span class="k">as</span> <span class="n">JsonObject</span>
</span><span class='line'>                <span class="k">select</span> <span class="k">new</span> <span class="n">Tweet</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">Id</span>        <span class="p">=</span> <span class="n">tweetData</span><span class="p">[</span><span class="s">&quot;id&quot;</span><span class="p">],</span>
</span><span class='line'>                    <span class="n">CreatedAt</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">ParseExact</span><span class="p">(</span><span class="n">tweetData</span><span class="p">[</span><span class="s">&quot;created_at&quot;</span><span class="p">],</span>
</span><span class='line'>                                    <span class="s">&quot;ddd MMM dd HH:mm:ss zz00 yyyy&quot;</span><span class="p">,</span> <span class="k">null</span><span class="p">),</span>
</span><span class='line'>                    <span class="n">Text</span>      <span class="p">=</span> <span class="n">tweetData</span><span class="p">[</span><span class="s">&quot;text&quot;</span><span class="p">],</span>
</span><span class='line'>                <span class="p">})</span>
</span><span class='line'>                <span class="p">.</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="n">callback</span><span class="p">(</span><span class="n">tweets</span><span class="p">);</span>
</span><span class='line'>        <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">webClient</span><span class="p">.</span><span class="n">DownloadStringAsync</span><span class="p">(</span><span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="n">url</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Exemplary user code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">apiClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TwitterApiClient</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="n">apiClient</span><span class="p">.</span><span class="n">DoWithTweetsForUser</span><span class="p">(</span><span class="s">&quot;robi42&quot;</span><span class="p">,</span> <span class="n">tweets</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">tweet</span> <span class="k">in</span> <span class="n">tweets</span><span class="p">)</span> <span class="c1">// Just for demo purpose.</span>
</span><span class='line'>        <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Tweet from {0}: {1}&quot;</span><span class="p">,</span> <span class="n">tweet</span><span class="p">.</span><span class="n">CreatedAt</span><span class="p">,</span> <span class="n">tweet</span><span class="p">.</span><span class="n">Text</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And with .NET 4.5&#8217;s new <a href="http://blogs.msdn.com/b/dotnet/archive/2012/04/03/async-in-4-5-worth-the-await.aspx">async features</a> landing in Monoland soon, related code will get even more convenient to write and handle.</p>

<p>Pretty neat, IMHO. What do you think?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play 2 Boilerplate]]></title>
    <link href="http://robi42.github.com/blog/2012/09/21/play-2-boilerplate/"/>
    <updated>2012-09-21T23:43:00+02:00</updated>
    <id>http://robi42.github.com/blog/2012/09/21/play-2-boilerplate</id>
    <content type="html"><![CDATA[<p>A little project aimed at getting one up and running quickly with building a
contemporary web app using <a href="http://www.playframework.org/">Play 2</a> framework.</p>

<p>Contains a bunch of current web dev <strong>best practices</strong> and niceties, from latest
Twitter Bootstrap (LESS) &amp; Backbone.js to CoffeeScript with CommonJS modules
support &amp; proper JS bundling.</p>

<p>Here&#8217;re a couple of exemplary code snippets to whet one&#8217;s appetite:</p>

<figure class='code'><figcaption><span>main.coffee  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">{</span><span class="nx">log</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span> <span class="s">&#39;./utilities&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nv">app = </span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">log</span> <span class="s">&#39;Hello, world!&#39;</span>
</span><span class='line'>  <span class="k">return</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Application.scala  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Application</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="n">index</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{</span>
</span><span class='line'>    <span class="nc">Ok</span><span class="o">(</span><span class="n">views</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">index</span><span class="o">(</span><span class="nc">Messages</span><span class="o">(</span><span class="s">&quot;app.name&quot;</span><span class="o">)))</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/robi42/play2-boilerplate">Get it on GitHub</a> while it&#8217;s hot.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, World!]]></title>
    <link href="http://robi42.github.com/blog/2012/09/16/hello/"/>
    <updated>2012-09-16T00:12:00+02:00</updated>
    <id>http://robi42.github.com/blog/2012/09/16/hello</id>
    <content type="html"><![CDATA[<p><img src="http://geekandpoke.typepad.com/.a/6a00d8341d3df553ef0128775126cc970c-800wi" title="Hesse" alt="Hesse"></p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Robi's Blog]]></title>
  <link href="http://robi42.github.com/blog/categories/programming/atom.xml" rel="self"/>
  <link href="http://robi42.github.com/"/>
  <updated>2013-07-07T15:55:06+02:00</updated>
  <id>http://robi42.github.com/</id>
  <author>
    <name><![CDATA[Robert Thurnher]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java.next?]]></title>
    <link href="http://robi42.github.com/blog/2013/07/07/java-dot-next/"/>
    <updated>2013-07-07T00:17:00+02:00</updated>
    <id>http://robi42.github.com/blog/2013/07/07/java-dot-next</id>
    <content type="html"><![CDATA[<p>After several years of programming Java while always keeping an eye on alternatives around, I've recently come to the conclusion:</p>

<p>Actually, there are just a few things still missing in the language these days which would render me a <em>happy camper</em>&#8482; indeed (enjoying its mature ecosystem of libraries &amp; tools).</p>

<p>Especially, since <a href="http://projectlombok.org/">Lombok</a> takes a lot of the general boilerplate code PITA away here (with useful features like convenient property accessors, <code>hashCode/equals/toString</code> impl., logging facility injection, ...).</p>

<p>Also, <a href="https://code.google.com/p/guava-libraries/wiki/GuavaExplained">Guava</a> does a truly good job in enabling one to write more concise and robust code.</p>

<p>Plus, Java 7 brought at least some nice, welcome <a href="http://www.oracle.com/technetwork/java/javase/jdk7-relnotes-418459.html#changes">improvements</a> in<br>
&rarr; <code>try-with-resources</code>, exceptions <code>multi-catch</code>, etc.</p>

<p>Finally, modern DI with Spring 3+ (or Guice) using <code>javax.inject.*</code> frees one from most needs for XML config and, after all, a build sys beating Maven for real has yet to come.</p>

<p>So namely, here's a <strong>personal wish list FTW</strong>:</p>

<ul>
<li>Pretty much everything <a href="http://www.techempower.com/blog/2013/03/26/everything-about-java-8/">coming up with Java/JDK 8</a> (sooner than later, hopefully) -- particularly <strong>lambdas</strong> (at last...)</li>
<li>More <strong>type inference</strong> (which the JVM is totally capable of); Java 7's diamond operator's definitely a good start there but, please, let me write <code>val foos = ...</code> (like in Scala...)</li>
<li><strong>Collection literals</strong> Ã  la Python or C#, something like this would be really sweet:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="c1">// Possibly, even without explicit generics declaration ;)</span>
</span><span class='line'> <span class="n">val</span> <span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LiteralHashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;{</span><span class="s">&quot;bar&quot;</span><span class="o">:</span> <span class="s">&quot;baz&quot;</span><span class="o">};</span>
</span><span class='line'> <span class="n">foo</span><span class="o">[</span><span class="s">&quot;bar&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;qux&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Pretty please. :)</p>

<p>PS: literal multiline strings, and so on and so forth, could be nice (but I can live without).
PPS: wouldn't say no to optionally named function/constructor args, though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Zen of Python]]></title>
    <link href="http://robi42.github.com/blog/2013/02/27/the-zen-of-python/"/>
    <updated>2013-02-27T11:21:00+01:00</updated>
    <id>http://robi42.github.com/blog/2013/02/27/the-zen-of-python</id>
    <content type="html"><![CDATA[<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;<span class="nv">$ </span>python -c <span class="s1">&#39;import this&#39;</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><blockquote><p></p></p><p><p>Beautiful is better than ugly.<br/>Explicit is better than implicit.<br/>Simple is better than complex.<br/>Complex is better than complicated.<br/>Flat is better than nested.<br/>Sparse is better than dense.<br/>Readability counts.<br/>Special cases aren't special enough to break the rules.<br/>Although practicality beats purity.<br/>Errors should never pass silently.<br/>Unless explicitly silenced.<br/>In the face of ambiguity, refuse the temptation to guess.<br/>There should be one-- and preferably only one --obvious way to do it.<br/>Although that way may not be obvious at first unless you're Dutch.<br/>Now is better than never.<br/>Although never is often better than <em>right</em> now.<br/>If the implementation is hard to explain, it's a bad idea.<br/>If the implementation is easy to explain, it may be a good idea.<br/>Namespaces are one honking great idea -- let's do more of those!</p></p><p><p></p><footer><strong>Tim Peters</strong> <cite><a href='http://www.python.org/dev/peps/pep-0020/'>PEP 20</a></cite></footer></blockquote></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Humble Programmer]]></title>
    <link href="http://robi42.github.com/blog/2012/12/07/the-humble-programmer/"/>
    <updated>2012-12-07T00:42:00+01:00</updated>
    <id>http://robi42.github.com/blog/2012/12/07/the-humble-programmer</id>
    <content type="html"><![CDATA[<p><blockquote><p>The competent programmer is fully aware of the strictly limited size of his own skull; therefore he approaches the programming task in full humility, and among other things he avoids clever tricks like the plague.</p><footer><strong>Edsger W. Dijkstra</strong> <cite><a href='http://www.cs.utexas.edu/users/EWD/transcriptions/EWD03xx/EWD340.html'>ACM Turing Lecture 1972</a></cite></footer></blockquote></p>
]]></content>
  </entry>
  
</feed>

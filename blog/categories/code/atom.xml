<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Robi's Blog]]></title>
  <link href="http://robi42.github.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://robi42.github.com/"/>
  <updated>2014-09-28T15:02:03+02:00</updated>
  <id>http://robi42.github.com/</id>
  <author>
    <name><![CDATA[Robert Thurnher]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Boot REST]]></title>
    <link href="http://robi42.github.com/blog/2014/04/13/boot-rest/"/>
    <updated>2014-04-13T23:38:00+02:00</updated>
    <id>http://robi42.github.com/blog/2014/04/13/boot-rest</id>
    <content type="html"><![CDATA[<p>Here's a little sort of template toy project regarding contemporary JVM-based REST APIs powering HTML5/JS SPAs: <br>
<a href="https://github.com/robi42/boot-rest">https://github.com/robi42/boot-rest</a></p>

<p>Built with JDK 8, Spring Boot, Elasticsearch, Jersey 2, Gradle, Yeoman, Bootstrap, AngularJS, fun, and all that jazz...</p>

<p>PS: look ma, no XML! (well, almost) ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java.next?]]></title>
    <link href="http://robi42.github.com/blog/2013/07/07/java-dot-next/"/>
    <updated>2013-07-07T00:17:00+02:00</updated>
    <id>http://robi42.github.com/blog/2013/07/07/java-dot-next</id>
    <content type="html"><![CDATA[<p>After several years of programming Java while always keeping an eye on alternatives around, I've recently come to the conclusion:</p>

<p>Actually, there are just a few things still missing in the language these days which would render me a <em>happy camper</em>&#8482; indeed (enjoying its mature ecosystem of libraries &amp; tools).</p>

<p>Especially, since <a href="http://projectlombok.org/">Lombok</a> takes a lot of the general boilerplate code PITA away here (with useful features like convenient property accessors, <code>hashCode/equals/toString</code> impl., logging facility injection, ...).</p>

<p>Also, <a href="https://code.google.com/p/guava-libraries/wiki/GuavaExplained">Guava</a> does a truly good job in enabling one to write more concise and robust code.</p>

<p>Plus, Java 7 brought at least some nice, welcome <a href="http://www.oracle.com/technetwork/java/javase/jdk7-relnotes-418459.html#changes">improvements</a> in<br>
&rarr; <code>try-with-resources</code>, exceptions <code>multicatch</code>, etc.</p>

<p>Finally, modern <a href="http://www.martinfowler.com/articles/injection.html#FormsOfDependencyInjection">DI</a> with Spring 3+ (or Guice) using <code>javax.inject.*</code> frees one from most needs for XML config and, after all, a build sys beating Maven for real has yet to come.</p>

<p>So namely, here's a <strong>personal wish list FTW</strong>:</p>

<ul>
<li>Pretty much everything <a href="http://www.techempower.com/blog/2013/03/26/everything-about-java-8/">coming up with Java/JDK 8</a> (sooner than later, hopefully) -- particularly <strong>lambdas</strong> (at last...)</li>
<li>More <strong>type inference</strong> (which the JVM is totally capable of); Java 7's diamond operator's definitely a good start there but, please, let me write <code>val foos = ...</code> (like in Scala...)</li>
<li><strong>Collection literals</strong> Ã  la Python or C#, something like this would be really sweet:</li>
</ul>


<p>{% codeblock lang:java %}</p>

<pre><code> // Possibly, even without explicit generics declaration ;)
 val foo = new LiteralHashMap&lt;String, String&gt;{"bar": "baz"};
 foo["bar"] = "qux";
</code></pre>

<p>{% endcodeblock %}</p>

<p>Pretty please. :)</p>

<p>PS: literal multiline strings, and so on and so forth, could be nice (but I can live without).<br>
PPS: wouldn't say no to optionally named function/constructor args, though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin FTW?]]></title>
    <link href="http://robi42.github.com/blog/2012/09/24/xamarin-ftw/"/>
    <updated>2012-09-24T20:02:00+02:00</updated>
    <id>http://robi42.github.com/blog/2012/09/24/xamarin-ftw</id>
    <content type="html"><![CDATA[<p>Often, when developing a mobile app one wants to target iOS as well as Android (+ maybe MS' OS).</p>

<p>Now, this basically means developing the app from scratch and consequently maintaining it at least twice on different platforms, written in different languages (Objective-C and Java, that is), using different sets of tools etc.</p>

<p>Cumbersome and potentially error-prone. Well, there's a viable alternative:</p>

<p>With <a href="http://xamarin.com/">Xamarin</a> one can write mobile apps targetting iOS and Android in C# using .NET (and native) libraries, sharing code (business logic, data &amp; web service layers, utilities, ...) while creating fully native UIs built on each platform's own SDKs, providing access to all respective device capabilities.</p>

<p>In addition to that, there's for example <a href="http://blog.xamarin.com/2012/02/10/easily-create-ios-user-interfaces-with-monotouch-dialog/">MonoTouch.Dialog</a> making it easier and more fun to create table-based iOS UIs and for Android there's a useful visual <a href="http://docs.xamarin.com/android/tutorials/Designer_Walkthrough">UI design tool</a> within the MonoDevelop IDE. Plus, there's <a href="http://xamarin.com/mobileapi">Xamarin.Mobile</a> aimed at exposing an unified API facade for accessing common device features. All interesting stuff when used sensibly.</p>

<p>Here's some demo code (which is loosely based on samples from the recommendable book <a href="http://shop.oreilly.com/product/0636920024002.do">"Mobile Development with C#"</a>) showing how mentioned shared layers could benefit:</p>

<p>{% codeblock Simple model lang:csharp %}
public class Tweet
{</p>

<pre><code>public long     Id        { get; set; }
public DateTime CreatedAt { get; set; }
public string   Text      { get; set; }
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>{% codeblock Simple REST API client lang:csharp %}
public class TwitterApiClient
{</p>

<pre><code>const string BaseUrl = "https://api.twitter.com/1/statuses/";

public void DoWithTweetsForUser(string username, Action&lt;IList&lt;Tweet&gt;&gt; callback)
{
    var webClient = new WebClient();
    var url = string.Format("{0}user_timeline.json?screen_name={1}",
                            BaseUrl, Uri.EscapeUriString(username));

    webClient.DownloadStringCompleted += (sender, e) =&gt; {
        var tweets = (from element in JsonValue.Parse(e.Result) as JsonArray
            let tweetData = element as JsonObject
            select new Tweet {
                Id        = tweetData["id"],
                CreatedAt = DateTime.ParseExact(tweetData["created_at"],
                                "ddd MMM dd HH:mm:ss zz00 yyyy", null),
                Text      = tweetData["text"],
            })
            .ToList();

        callback(tweets);
    };

    webClient.DownloadStringAsync(new Uri(url));
}
</code></pre>

<p>}
{% endcodeblock %}</p>

<p>{% codeblock Exemplary user code lang:csharp %}
var apiClient = new TwitterApiClient();</p>

<p>apiClient.DoWithTweetsForUser("robi42", tweets => {</p>

<pre><code>foreach (var tweet in tweets) // Just for demo purpose.
    Debug.WriteLine("Tweet from {0}: {1}", tweet.CreatedAt, tweet.Text);
</code></pre>

<p>});
{% endcodeblock %}</p>

<p>And with .NET 4.5's new <a href="http://blogs.msdn.com/b/dotnet/archive/2012/04/03/async-in-4-5-worth-the-await.aspx">async features</a> landing in Monoland soon, related code will get even more convenient to write and handle.</p>

<p>Pretty neat, IMHO. What do you think?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play 2 Boilerplate]]></title>
    <link href="http://robi42.github.com/blog/2012/09/21/play-2-boilerplate/"/>
    <updated>2012-09-21T23:43:00+02:00</updated>
    <id>http://robi42.github.com/blog/2012/09/21/play-2-boilerplate</id>
    <content type="html"><![CDATA[<p>A little project aimed at getting one up and running quickly with building a
contemporary web app using <a href="http://www.playframework.org/">Play 2</a> framework.</p>

<p>Contains a bunch of current web dev <strong>best practices</strong> and niceties, from latest
Twitter Bootstrap (LESS) &amp; Backbone.js to CoffeeScript with CommonJS modules
support &amp; proper JS bundling.</p>

<p>Here're a couple of exemplary code snippets to whet one's appetite:</p>

<p>{% codeblock main.coffee lang:coffeescript %}
{log} = require './utilities'</p>

<p>$(document).ready ->
  window.app = {}
  log 'Hello, world!'
  return
{% endcodeblock %}</p>

<p>{% codeblock Application.scala lang:scala %}
object Application extends Controller {</p>

<p>  def index = Action {</p>

<pre><code>Ok(views.html.index(Messages("app.name")))
</code></pre>

<p>  }</p>

<p>}
{% endcodeblock %}</p>

<p><a href="https://github.com/robi42/play2-boilerplate">Get it on GitHub</a> while it's hot.</p>
]]></content>
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Code | Robi's Blog]]></title>
  <link href="http://robi42.github.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://robi42.github.com/"/>
  <updated>2013-07-07T15:20:47+02:00</updated>
  <id>http://robi42.github.com/</id>
  <author>
    <name><![CDATA[Robert Thurnher]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Java.next?]]></title>
    <link href="http://robi42.github.com/blog/2013/07/07/java-dot-next/"/>
    <updated>2013-07-07T00:17:00+02:00</updated>
    <id>http://robi42.github.com/blog/2013/07/07/java-dot-next</id>
    <content type="html"><![CDATA[<p>After several years of programming Java while always keeping an eye on alternatives around, I've recently come to the conclusion:</p>

<p>Actually, there are just a few things still missing in the language these days which would render me a <em>happy camper</em>&#8482; indeed (enjoying its mature ecosystem of libraries &amp; tools).</p>

<p>Especially, since <a href="http://projectlombok.org/">Lombok</a> takes a lot of the general boilerplate code PITA away here (with useful features like convenient property accessors, <code>hashCode/equals/toString</code> impl., logging facility injection, ...).</p>

<p>Also, <a href="https://code.google.com/p/guava-libraries/wiki/GuavaExplained">Guava</a> does a truly good job in enabling one to write more concise and robust code.</p>

<p>Plus, Java 7 brought at least some nice, welcome <a href="http://www.oracle.com/technetwork/java/javase/jdk7-relnotes-418459.html#changes">improvements</a> in<br>
&rarr; <code>try-with-resources</code>, exceptions <code>multi-catch</code>, etc.</p>

<p>Finally, modern DI with Spring 3+ (or Guice) using <code>javax.inject.*</code> frees one from most needs for XML config and, after all, a build sys beating Maven for real has yet to come.</p>

<p>So namely, here's a <strong>personal wish list FTW</strong>:</p>

<ul>
<li>Pretty much everything <a href="http://www.techempower.com/blog/2013/03/26/everything-about-java-8/">coming up with Java/JDK 8</a> (sooner than later, hopefully) -- particularly <strong>lambdas</strong> (at last...)</li>
<li>More <strong>type inference</strong> (which the JVM is totally capable of); Java 7's diamond operator's definitely a good start there but, please, let me write <code>val foos = ...</code> (like in Scala...)</li>
<li><strong>Collection literals</strong> a l√° Python or C#, something like this would be really sweet:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span> <span class="c1">// Possibly, even without explicit generics declaration ;)</span>
</span><span class='line'> <span class="n">val</span> <span class="n">foo</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LiteralHashMap</span><span class="o">&amp;</span><span class="n">lt</span><span class="o">;</span><span class="n">String</span><span class="o">,</span> <span class="n">String</span><span class="o">&amp;</span><span class="n">gt</span><span class="o">;{</span><span class="s">&quot;bar&quot;</span><span class="o">:</span> <span class="s">&quot;baz&quot;</span><span class="o">};</span>
</span><span class='line'> <span class="n">foo</span><span class="o">[</span><span class="s">&quot;bar&quot;</span><span class="o">]</span> <span class="o">=</span> <span class="s">&quot;qux&quot;</span><span class="o">;</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Pretty please. :)</p>

<p>PS: literal multiline strings, and so on and so forth, could be nice (but I can live without).
PPS: wouldn't say no to optionally named function/constructor params, though.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin FTW?]]></title>
    <link href="http://robi42.github.com/blog/2012/09/24/xamarin-ftw/"/>
    <updated>2012-09-24T20:02:00+02:00</updated>
    <id>http://robi42.github.com/blog/2012/09/24/xamarin-ftw</id>
    <content type="html"><![CDATA[<p>Often, when developing a mobile app one wants to target iOS as well as Android (+ maybe MS' OS).</p>

<p>Now, this basically means developing the app from scratch and consequently maintaining it at least twice on different platforms, written in different languages (Objective-C and Java, that is), using different sets of tools etc.</p>

<p>Cumbersome and potentially error-prone. Well, there's a viable alternative:</p>

<p>With <a href="http://xamarin.com/">Xamarin</a> one can write mobile apps targetting iOS and Android in C# using .NET (and native) libraries, sharing code (business logic, data &amp; web service layers, utilities, ...) while creating fully native UIs built on each platform's own SDKs, providing access to all respective device capabilities.</p>

<p>In addition to that, there's for example <a href="http://blog.xamarin.com/2012/02/10/easily-create-ios-user-interfaces-with-monotouch-dialog/">MonoTouch.Dialog</a> making it easier and more fun to create table-based iOS UIs and for Android there's a useful visual <a href="http://docs.xamarin.com/android/tutorials/Designer_Walkthrough">UI design tool</a> within the MonoDevelop IDE. Plus, there's <a href="http://xamarin.com/mobileapi">Xamarin.Mobile</a> aimed at exposing an unified API facade for accessing common device features. All interesting stuff when used sensibly.</p>

<p>Here's some demo code (which is loosely based on samples from the recommendable book <a href="http://shop.oreilly.com/product/0636920024002.do">"Mobile Development with C#"</a>) showing how mentioned shared layers could benefit:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Simple model  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Tweet</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">public</span> <span class="kt">long</span>     <span class="n">Id</span>        <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="n">DateTime</span> <span class="n">CreatedAt</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="k">public</span> <span class="kt">string</span>   <span class="n">Text</span>      <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Simple REST API client  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TwitterApiClient</span>
</span><span class='line'><span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">const</span> <span class="kt">string</span> <span class="n">BaseUrl</span> <span class="p">=</span> <span class="s">&quot;https://api.twitter.com/1/statuses/&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">DoWithTweetsForUser</span><span class="p">(</span><span class="kt">string</span> <span class="n">username</span><span class="p">,</span> <span class="n">Action</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">IList</span><span class="p">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="n">Tweet</span><span class="p">&amp;</span><span class="n">gt</span><span class="p">;&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">webClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">WebClient</span><span class="p">();</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">url</span> <span class="p">=</span> <span class="kt">string</span><span class="p">.</span><span class="n">Format</span><span class="p">(</span><span class="s">&quot;{0}user_timeline.json?screen_name={1}&quot;</span><span class="p">,</span>
</span><span class='line'>                            <span class="n">BaseUrl</span><span class="p">,</span> <span class="n">Uri</span><span class="p">.</span><span class="n">EscapeUriString</span><span class="p">(</span><span class="n">username</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">webClient</span><span class="p">.</span><span class="n">DownloadStringCompleted</span> <span class="p">+=</span> <span class="p">(</span><span class="n">sender</span><span class="p">,</span> <span class="n">e</span><span class="p">)</span> <span class="p">=&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">tweets</span> <span class="p">=</span> <span class="p">(</span><span class="k">from</span> <span class="n">element</span> <span class="k">in</span> <span class="n">JsonValue</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">e</span><span class="p">.</span><span class="n">Result</span><span class="p">)</span> <span class="k">as</span> <span class="n">JsonArray</span>
</span><span class='line'>            <span class="n">let</span> <span class="n">tweetData</span> <span class="p">=</span> <span class="n">element</span> <span class="k">as</span> <span class="n">JsonObject</span>
</span><span class='line'>            <span class="k">select</span> <span class="k">new</span> <span class="n">Tweet</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">Id</span>        <span class="p">=</span> <span class="n">tweetData</span><span class="p">[</span><span class="s">&quot;id&quot;</span><span class="p">],</span>
</span><span class='line'>                <span class="n">CreatedAt</span> <span class="p">=</span> <span class="n">DateTime</span><span class="p">.</span><span class="n">ParseExact</span><span class="p">(</span><span class="n">tweetData</span><span class="p">[</span><span class="s">&quot;created_at&quot;</span><span class="p">],</span>
</span><span class='line'>                                <span class="s">&quot;ddd MMM dd HH:mm:ss zz00 yyyy&quot;</span><span class="p">,</span> <span class="k">null</span><span class="p">),</span>
</span><span class='line'>                <span class="n">Text</span>      <span class="p">=</span> <span class="n">tweetData</span><span class="p">[</span><span class="s">&quot;text&quot;</span><span class="p">],</span>
</span><span class='line'>            <span class="p">})</span>
</span><span class='line'>            <span class="p">.</span><span class="n">ToList</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">callback</span><span class="p">(</span><span class="n">tweets</span><span class="p">);</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">webClient</span><span class="p">.</span><span class="n">DownloadStringAsync</span><span class="p">(</span><span class="k">new</span> <span class="n">Uri</span><span class="p">(</span><span class="n">url</span><span class="p">));</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Exemplary user code  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">apiClient</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TwitterApiClient</span><span class="p">();&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;</span><span class="n">apiClient</span><span class="p">.</span><span class="n">DoWithTweetsForUser</span><span class="p">(</span><span class="s">&quot;robi42&quot;</span><span class="p">,</span> <span class="n">tweets</span> <span class="p">=&gt;</span> <span class="p">{&lt;/</span><span class="n">p</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">pre</span><span class="p">&gt;&lt;</span><span class="n">code</span><span class="p">&gt;</span><span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">tweet</span> <span class="k">in</span> <span class="n">tweets</span><span class="p">)</span> <span class="c1">// Just for demo purpose.</span>
</span><span class='line'>    <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Tweet from {0}: {1}&quot;</span><span class="p">,</span> <span class="n">tweet</span><span class="p">.</span><span class="n">CreatedAt</span><span class="p">,</span> <span class="n">tweet</span><span class="p">.</span><span class="n">Text</span><span class="p">);</span>
</span><span class='line'><span class="p">&lt;/</span><span class="n">code</span><span class="p">&gt;&lt;/</span><span class="n">pre</span><span class="p">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="p">&lt;</span><span class="n">p</span><span class="p">&gt;});</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>And with .NET 4.5's new <a href="http://blogs.msdn.com/b/dotnet/archive/2012/04/03/async-in-4-5-worth-the-await.aspx">async features</a> landing in Monoland soon, related code will get even more convenient to write and handle.</p>

<p>Pretty neat, IMHO. What do you think?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Play 2 Boilerplate]]></title>
    <link href="http://robi42.github.com/blog/2012/09/21/play-2-boilerplate/"/>
    <updated>2012-09-21T23:43:00+02:00</updated>
    <id>http://robi42.github.com/blog/2012/09/21/play-2-boilerplate</id>
    <content type="html"><![CDATA[<p>A little project aimed at getting one up and running quickly with building a
contemporary web app using <a href="http://www.playframework.org/">Play 2</a> framework.</p>

<p>Contains a bunch of current web dev <strong>best practices</strong> and niceties, from latest
Twitter Bootstrap (LESS) &amp; Backbone.js to CoffeeScript with CommonJS modules
support &amp; proper JS bundling.</p>

<p>Here're a couple of exemplary code snippets to whet one's appetite:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>main.coffee  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">{</span><span class="nx">log</span><span class="p">}</span> <span class="o">=</span> <span class="nx">require</span> <span class="s">&#39;./utilities&#39;</span><span class="o">&lt;/</span><span class="nx">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="nx">ready</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="nb">window</span><span class="p">.</span><span class="nv">app = </span><span class="p">{}</span>
</span><span class='line'>  <span class="nx">log</span> <span class="s">&#39;Hello, world!&#39;</span>
</span><span class='line'>  <span class="k">return</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Application.scala  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="k">object</span> <span class="nc">Application</span> <span class="k">extends</span> <span class="nc">Controller</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="n">index</span> <span class="k">=</span> <span class="nc">Action</span> <span class="o">{&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="nc">Ok</span><span class="o">(</span><span class="n">views</span><span class="o">.</span><span class="n">html</span><span class="o">.</span><span class="n">index</span><span class="o">(</span><span class="nc">Messages</span><span class="o">(</span><span class="s">&quot;app.name&quot;</span><span class="o">)))</span>
</span><span class='line'><span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="o">}&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><a href="https://github.com/robi42/play2-boilerplate">Get it on GitHub</a> while it's hot.</p>
]]></content>
  </entry>
  
</feed>
